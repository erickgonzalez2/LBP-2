options{
    
    LOOKAHEAD=1;
   
}



PARSER_BEGIN(Gramatica)


import java.util.*;
import java.io.*;

class Gramatica{

    static ArrayList<String> nombreVariable = new ArrayList<String>(); 
    static ArrayList<String> tipoDato = new ArrayList<String>(); 
    static ArrayList<String> valorAlmacenado = new ArrayList<String>(); 
    static ArrayList<String> erroresLexicos = new ArrayList<String>(); 
    static ArrayList<String> erroresSintacticos = new ArrayList<String>(); 
    static ArrayList<String> erroresSemanticos = new ArrayList<String>(); 
    static String nombreV ="";
    static String tipoD ="";
    static String valorV="nulo";
    static int errores = 0;
    static boolean yaimpreso = false;
    public static void main(String[] args )  throws FileNotFoundException {
        
    System.out.println("Ingresa el nombre del archivo que quieres analizar");
    Scanner entrada = new Scanner (System.in);
    String str = entrada.next();
    
    str+= ".txt";
    FileReader file = new FileReader(str);
    BufferedReader buffer = new BufferedReader (file);
    Gramatica analizador = new Gramatica (buffer);
        inicio(str,file,buffer,analizador);
    }
    static void inicio(String str,FileReader file, BufferedReader buffer,Gramatica analizador)throws FileNotFoundException {
    
    
    try{
               
        analizador.Programa();
        

        if(!yaimpreso){

        if(errores ==0 && erroresSemanticos.isEmpty()){
            System.out.println("Ejecucion finalizada sin errores");
            yaimpreso=true;
        }

        else if(errores == 1 ){

            System.out.println("Se ha encontrado 1 error sintactico");
            yaimpreso=true;
        }

          else {
            yaimpreso=true;
            if(errores!=0)System.out.println("Se han encontrado " +errores + " errores sintacticos");
                }
}

    }catch (ParseException e) {
  
        Token t;
              System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
      
         do {
       t = getNextToken();
       if(t.kind== EOF)break;
 
         } while (t!=null && t.kind != EOF  );
    }

     if(!yaimpreso){

        if(errores ==0 && erroresSemanticos.isEmpty()){
            System.out.println("Ejecucion finalizada sin errores");
            yaimpreso=true;
        }

        else if(errores == 1 ){

            System.out.println("Se ha encontrado 1 error sintactico");
            yaimpreso=true;
        }

          else {
            yaimpreso=true;
            System.out.println("Se han encontrado " +errores + " errores sintacticos");
                }

                 System.out.println("");

}

    System.out.println("");
    if(!erroresSemanticos.isEmpty()){


    for (String impresion: erroresSemanticos) {
    System.out.println(impresion);
    System.out.println("");
    }   

    System.out.println("");
    if(erroresSemanticos.size()==1) System.out.println("Se han encontrado " +erroresSemanticos.size() + " error semantico");


    else System.out.println("Se han encontrado " +erroresSemanticos.size() + " errores semanticos");

    }

    }




static String errorData(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        String[] tokenImageVal){
    String eol = System.getProperty("line.separator", "\n");
    Token currentToken = currentTokenVal;
    int [][] expectedTokenSequences = expectedTokenSequencesVal;
    String[] tokenImage = tokenImageVal;
    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      if (maxSize < expectedTokenSequences[i].length) {
        maxSize = expectedTokenSequences[i].length;
      }
      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
        expected.append("...");
      }
      expected.append(eol).append("    ");
    }
    
    String str0 = "";
    
    if(currentToken.next.kind == 0) return str0;
    
    
    String retval = "";
    if(currentToken.next.kind == 56){
        errores++;
        retval+="\n\nError Lexico, ";
        retval += "Se ha encontrado \"";
        Token tok = currentToken.next;
        for (int i = 0; i < maxSize; i++) {
        if (i != 0) retval += " ";
        if (tok.kind == 0) {
            retval += tokenImage[0];
            break;
        }
        //retval += " " + tokenImage[tok.kind];
        //retval += " \"";
        retval += add_escapes(tok.image);
        retval += "\"";
        tok = tok.next; 
        }
    retval += " en la linea " + currentToken.next.beginLine + ", columna " + currentToken.next.beginColumn;
    retval += "." + eol;
    
    retval += "El token no es reconocido por el lenguaje";
    return retval;
        
         
    }else{
    errores++;
    retval+="\n\nError Sintactico, ";
    retval += "Se ha encontrado \"";
    Token tok = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += " ";
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += " " + tokenImage[tok.kind];
      retval += " \"";
      retval += add_escapes(tok.image);
      retval += " \"";
      tok = tok.next; 
    }
    retval += "\" en la linea " + currentToken.next.beginLine + ", columna " + currentToken.next.beginColumn;
    retval += "." + eol;
    if (expectedTokenSequences.length == 1) {
      retval += "Se esperaba:" + eol + "    ";
    } else {
      retval += "Se esperaba:" + eol + "    ";
    }
    retval += expected.toString();

    return retval;
    }

  }
    static String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   }

}






PARSER_END (Gramatica)


SKIP : 
{
    " " | "\n" | "\r" | "\r\n" | "\t" 
}
//OPERADORES ARITMETICOS
TOKEN : 
{
    <IGUAL : "="> // {System.out.println("(OP_Asignacion ---> " +  image + ")");}        //1
    |<MAS : "+">  //{System.out.println("(OP_Mas ---> " +  image + ")");}        //2
    |<MENOS : "-">//{System.out.println("(OP_Menos ---> " +  image + ")");}        //3
    |<MULTIPLICAR : "*">//{System.out.println("(OP_Multiplicar ---> " +  image + ")");}        //4 
    |<DIVIDIR : "/">    //{System.out.println("(OP_Division --->" +  image + ")");}        //5
    |<MODULO : "%">      //{System.out.println("(OP_Modulo ---> " +  image + ")");}     //8
    |<SUMAIGUAL : "+="> //{System.out.println("(OP_SumaAsignacion ---> " +  image + ")");}     //9
    |<RESTAIGUAL : "-=">//{System.out.println("(OP_RestaAsignacion ---> " +  image + ")");}     //10
    |<MULTIGUAL : "*="> //{System.out.println("(OP_MultiplicacionAsignacion ---> " +  image + ")");}     //11
    |<DIVIDIRIGUAL : "/=">//{System.out.println("(OP_DividirAsignacion ---> " +  image + ")");}     //12
    |<MODULOIGUAL : "%="> // {System.out.println("(OP_ModuloAsignacion ---> " +  image + ")");}     //13
}

//PALABRAS RESERVADAS
TOKEN : 
{
     <MAIN : "principal">   // {System.out.println("(PR_MAIN ---> " +  image + ")");}  //15
    | <WRITE : "imprimir">  //  {System.out.println("(PR_IMPRIMIR ---> " +  image + ")");}  //16
    | <READ : "leer">       //  {System.out.println("(PR_LEER ---> " +  image + ")");}  //17
    | <IF : "cuando">       //  {System.out.println("(PR_IF ---> " +  image + ")");}  //18
    | <ELSE : "sino">       //    {System.out.println("(PR_ELSE ---> " +  image + ")");}//19
    | <BREAK : "romper"> // {System.out.println("(PR_BREAK ---> " +  image + ")");}//22
    | <FOR : "ciclo_for"> //{System.out.println("(PR_FOR ---> " +  image + ")");}//23
    | <WHILE : "ciclo_mientras">//{System.out.println("(PR_WHILE ---> " +  image + ")");}//24
    |<ASIGN : "asignacion">// {System.out.println("(PR_ASIGN ---> " +  image + ")");}//25
    |<ASIGN_A : "asignacion_a">// {System.out.println("(PR_ASIGN ---> " +  image + ")");}//25
    |<DECLARATE : "declarar"> //{System.out.println("(PR_DEC ---> " +  image + ")");}//25
    |<DECLARATE_A : "declarar_a"> //{System.out.println("(PR_DECLA_A ---> " +  image + ")");}//25
    |<ICR: "icr"> //{System.out.println("(PR_ICR ---> " +  image + ")");}//25
    |<DCR : "dcr"> //{System.out.println("(PR_DCR---> " +  image + ")");}//25

}

//CARACTERES ESPECIALES
TOKEN :
{
    <PARI : "(">        //           {System.out.println("(CE_PARENTESISIZQ ---> \"" +  image + "\")");}//25
    | <PARD : ")">        //    {System.out.println("(CE_PARENTESISDER ---> \"" +  image + "\")");}//26
    | <LLAVEI : "{">      //    {System.out.println("(CE_LLAVEIZQ ---> \"" +  image + "\")");}//27
    | <LLAVED : "}">      //     {System.out.println("(CE_LLAVEDER ---> \"" +  image + "\")");}//28
    | <DELIMITER : ";">   //   {System.out.println("(CE_DELIMITADOR ---> \"" +  image + "\")");}//29
    | <COMA : ",">        //   {System.out.println("(CE_COMA ---> \"" +  image + "\")");}//30
    | <COMILLA : "\"">    //   {System.out.println("(CE_COMILLA ---> \"" +  image + "\")");}//31
    | <COMENTARIO : "#">  //   {System.out.println("(CE_COMENTARIO ---> \"" +  image + "\")");}//32
}


//OPERADORES LOGICOS
TOKEN : 
{
    <IGUALDAD : "==">     //{System.out.println("(OPL_IGUALDAD ---> " +  image + ")");}//34
    | <MAYOR : ">">       //{System.out.println("(OPL_MAYORQUE ---> " +  image + ")");}//35
    | <MAYORI : ">=">     //{System.out.println("(OPL_MAYORIGUAL ---> " +  image + ")");}//36
    | <MENOR : "<">       //  {System.out.println("(OPL_MENORQUE ---> " +  image + ")");}//37
    | <MENORI : "<=">     //  {System.out.println("(OPL_MENORIGUAL ---> " +  image + ")");}//38
    | <DIFERENCIA : "!="> //{System.out.println("(OPL_DIFERENCIA ---> " +  image + ")");}//39
    | <NEGACION : "!">    //    {System.out.println("(OPL_NEGACION ---> " +  image + ")");}//40
    | <AND : "&&">        //{System.out.println("(OPL_AND ---> " +  image + ")");}//41
    | <OR : "||">         //{System.out.println("(OPL_OR ---> " +  image + ")");}//42
}


    //VALORES PREDETERMINADOS
    TOKEN : 
    {
        <TRUE : "verdadero">    //{System.out.println("(VP_TRUE ---> " +  image + ")");}//43
        |<FALSE : "falso">      //{System.out.println("(VP_FALSE ---> " +  image + ")");}//44
        |<NULL  : "nulo">         //{System.out.println("(VP_NULL ---> " +  image + ")");}//45
    }


//TIPOS DE DATOS
TOKEN :
{
    <INT : "entero">           // {System.out.println("(TD_INT ---> " +  image + ")");}//46
    | <FLOAT : "flotante">     //{System.out.println("(TD_FLOAT ---> " +  image + ")");}//47
    | <STRING : "cadena">      //{System.out.println("(TD_STRING ---> " +  image + ")");}//48
    | <BOOL : "bool">          //{System.out.println("(TD_BOOLEAN ---> " +  image + ")");}//49
    | <CARACTER : "caracter">  //{System.out.println("(TD_CHAR ---> " +  image + ")");}    //50
    | <NUMERO : (["0" - "9"])+>//{System.out.println("(NUMBER ---> " +  image + ")");}//51
    | <IDENTIFICADOR :  ["a" - "z", "A" - "Z"](["a" - "z", "A" - "Z", "0" - "9", "_"])*>   //{System.out.println("(IDENTIFICADOR ---> " +  image + ")");} //52
    | <DECIMAL : (["0" - "9"])+["."](["0" - "9"])+>             //    {System.out.println("(DECIMAL ---> " +  image + ")");}//53
    | <CADENA : "\""(~["\""])*"\"" > //{System.out.println("(STRING ---> " +  image + ")");} //54
    | <CHAR : "\'"(~["\""])"\'" >   // {System.out.println("(CHAR ---> " +  image + ")");} //55
       | <ERRORES : ~[]> //  {System.out.println("(ERROR ---> " +  image + ")");} //58

}

//----------------------------------------FIN DECLARACION TOKENS -------------------------------------------------------
//----------------------------------------INICIO DECLARACION GRAMATICAS -------------------------------------------------------
    
//----------------------------------------PROGRAMA PRINCIPAL -------------------------------------------------------
    void Programa() :{}
    {
        
            <MAIN><PARI><PARD><LLAVEI> Bloque() <LLAVED> <EOF>
        
    }
    
    
//----------------------------------------BLOQUE DE SENTENCIAS -------------------------------------------------------
    void Bloque() : {}
    {
       
        (
            sentencia()
        )*  
        
        
    }
//----------------------------------------SENTENCIAS -------------------------------------------------------
    void sentencia() : {}
    {


        imprimir()
        |errorLexico()
        |declaraciones()
        |asignaciones()   //Asignacion IDENTIFICADOR = (VALOR | IDENFITICADOR) DELIMITER
        |incrementoDecremento()
        | condicionalIf()
        | LOOKAHEAD(2)cicloFor()
        | (<BREAK>delimiter())
        | cicloWhile()
        | leer()
        | declaracionAritmetica()
        |asignacionAritmetica()        

    }

//---------------------------------------- IMPRIMIR -------------------------------------------------------
    void imprimir() :{}

   {
        //PALABRA RESERVADA       

         <WRITE>pari()(

         try{

        <IDENTIFICADOR>{errorSemanticoImprimir();}|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>}

        catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO &&
               t.kind != DECIMAL  && t.kind != TRUE &&  t.kind != FALSE && 
               t.kind != CADENA && t.kind != CHAR &&  t!=null && t.kind != EOF );
        }

        )

       pard() delimiter()

}

//---------------------------------------- DECLARACIONES -------------------------------------------------------
    void declaraciones() : 
    {}
    {   

        <DECLARATE>
        //TIPO DE DATO
        try{(<INT>|<CARACTER>|<FLOAT>|<STRING>|<BOOL>){guardarTipoDato();}
        }

        catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != INT && t.kind != CARACTER &&
               t.kind != FLOAT && t.kind != STRING &&  t.kind != BOOL && 
               t!=null && t.kind != EOF );
        }

        //IDENTIFICADOR
        identificador(){guardarNombreV();}

        //SIMBOLO =
        ((igual()

        //VALOR
        try{

        (<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>){guardarValorV();}}

        catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO &&
               t.kind != DECIMAL  && t.kind != TRUE &&  t.kind != FALSE && 
               t.kind != CADENA && t.kind != CHAR &&  t!=null && t.kind != EOF );
        }

        delimiter(){declarar();})|   delimiter(){declarar();}) 
    }


//---------------------------------------- DECLARACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
    void declaracionAritmetica() : {}
    {

        //PALABRA RESERVADA DECLARACION

        <DECLARATE_A>
        //TIPO DE DATO

        try{(<INT>|<CARACTER>|<FLOAT>|<STRING>|<BOOL>)
        }

        catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != INT && t.kind != CARACTER &&
               t.kind != FLOAT && t.kind != STRING &&  t.kind != BOOL && 
               t!=null && t.kind != EOF );
        }

        //IDENTIFICADOR
        identificador()

        //SIMBOLO =
        ((igual()operacion()delimiter()))
    }

//----------------------------------------OPERACIONES ARITMETICAS-------------------------------------------------------
    void operacion() : {}
    {
        try{
       ( <NUMERO> | <IDENTIFICADOR> | <DECIMAL>)
       }

       catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != NUMERO && t.kind != IDENTIFICADOR &&
               t.kind != DECIMAL && t!=null && t.kind != EOF );
        }



    (

    try{(<MAS>|<MENOS>|<MULTIPLICAR>|<DIVIDIR>|<MODULO>)

    }

    catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != MAS && t.kind != MENOS &&
               t.kind != MULTIPLICAR && t.kind != DIVIDIR && t.kind != MODULO && t!=null && t.kind != EOF );
        }


    try{(<NUMERO>|<IDENTIFICADOR>|<DECIMAL>)
    }

    catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != NUMERO && t.kind != IDENTIFICADOR &&
               t.kind != DECIMAL && t!=null && t.kind != EOF );
        }



    )*


    }


//---------------------------------------- ASIGNACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
    void asignacionAritmetica() : {}
    {
        <ASIGN_A>identificador()
        try{(<IGUAL>|<SUMAIGUAL>|<RESTAIGUAL>|<MULTIGUAL>|<DIVIDIRIGUAL>|<MODULOIGUAL>)}

         catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IGUAL && t.kind != SUMAIGUAL &&
               t.kind != RESTAIGUAL && t.kind != MULTIGUAL && t.kind != DIVIDIRIGUAL &&
               t.kind != MODULOIGUAL && t!=null && t.kind != EOF );
        }

        operacion()delimiter()
    }


//----------------------------------------GRAMATICAS INCREMENTO O DECREMENTO -------------------------------------------------------
    void incrementoDecremento() : {}
    {
        (<ICR>|<DCR>)
        //OPERANDO
        (identificador())

        //OPERADOR
        try{(<MAS><MAS>|<MENOS><MENOS>)}

        catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != MAS && t.kind != MENOS &&
              t!=null && t.kind != EOF );
        }

        //DELIMITADOR
        delimiter()

    }

//----------------------------------------ASIGNACIONES NORMALES -------------------------------------------------------
    void asignaciones() : {}
    {
        //PALABRA RESERVADA       

         <ASIGN> identificador() igual()


        try{(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>)}

        catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO && t.kind != DECIMAL &&
              t.kind != TRUE && t.kind != FALSE && t.kind != CADENA &&
            t.kind != CADENA && t.kind != CHAR && t != null && t.kind != EOF );
        }


        delimiter()



}   

//----------------------------------------COMPARACION LOGICA -------------------------------------------------------
    void comparacionLogica() : {}
    {



        //PRIMER TERMINO DEL IF
        try{((<NEGACION>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))|<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>)}

        catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO && t.kind != DECIMAL &&
              t.kind != NEGACION && t.kind != CADENA && t.kind != CHAR && t != null && t.kind != EOF );
        }


        //OPERADOR
        (try{(<IGUALDAD> | <MAYOR> | <MAYORI> | <MENOR> | <MENORI>
        | <DIFERENCIA> | <AND> | <OR>
        )}

        catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IGUALDAD && t.kind != MAYORI && t.kind != MENOR &&
              t.kind != MENORI && t.kind != DIFERENCIA && t.kind != AND && 
              t.kind != OR && t != null && t.kind != EOF );
        }


        //SEGUNDO TERMINO
        try{((<NEGACION>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))|<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>)}
         catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO && t.kind != DECIMAL &&
              t.kind != NEGACION && t.kind != CADENA && t.kind != CHAR && t != null && t.kind != EOF );
        }
        )*


}       
        



//----------------------------------------ESTRUCTURA CONDICIONAL IF -------------------------------------------------------
    void condicionalIf() :    {}
    {


        <IF>pari()comparacionLogica()pard()llavei()(sentencia())*llaved()

        //ELSEIF
        (LOOKAHEAD(2)(sino()si()pari()comparacionLogica()pard()llavei()(sentencia())*llaved()))*
        (LOOKAHEAD(2)(sino()llavei()(sentencia())*llaved()))*



}
//---------------------------------------- ESTRUCTURA CICLO FOR -------------------------------------------------------
    void cicloFor() : {}
    {


            <FOR>pari()identificador()igual()numero()delimiter()identificador()

            //OPERADOR LOGICO
            try{(<MENOR>|<MAYOR>|<MENORI>|<MAYORI>|<IGUALDAD>|<DIFERENCIA>)}

            catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != MENOR && t.kind != MAYOR && t.kind != MENORI &&
              t.kind != MAYORI && t.kind != IGUALDAD  && t.kind != DIFERENCIA && t != null && t.kind != EOF );
        }


            try{(<NUMERO>|<IDENTIFICADOR>)}

            catch(ParseException e){
             Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != NUMERO && t.kind != IDENTIFICADOR && t != null && t.kind != EOF );

            }
            delimiter()

            //PASO
            identificador()try{(<MAS><MAS>|<MENOS><MENOS>)}

             catch(ParseException e){
             Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != MAS && t.kind != MENOS && t != null && t.kind != EOF );

            }
            pard()llavei()(sentencia())*llaved()

    }


//----------------------------------------ESTRUCTURA CICLO WHILE -------------------------------------------------------
    void cicloWhile() : {}
    {
        <WHILE>pari()comparacionLogica()pard()llavei()(sentencia())*llaved()
    }

//----------------------------------------LEER DATOS DESDE TECLADO -------------------------------------------------------
    void leer() : {}
    {
        <READ>pari()identificador()pard()delimiter()

}

     void delimiter() :
    {}
    {
    try 
    {
    <DELIMITER> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != DELIMITER && t!=null && t.kind != EOF );
    }
    }

void llavei() :
    {}
    {
    try 
    { 
    <LLAVEI> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != LLAVEI && t!=null && t.kind != EOF );
    }
    }

void llaved() :
    {}
    {
    try 
    { 
    <LLAVED>
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != LLAVED && t!=null && t.kind != EOF );
    }
    }


 void pari() :
    {}
    {
    try 
    { 
    <PARI> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != PARI && t!=null && t.kind != EOF );
    }
    }

void pard() :
    {}
    {
    try 
    {
    <PARD> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != PARD && t!=null && t.kind != EOF );
    }
    }

void identificador():
    {}
    {
    try 
    {
    <IDENTIFICADOR> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != IDENTIFICADOR && t!=null && t.kind != EOF );
    }
    }

void igual():
{}
    {
    try 
    {
    <IGUAL> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != IGUAL && t!=null && t.kind != EOF );
    }
    }

void negacion():
{}
    {
    try 
    {
    <NEGACION> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != NEGACION && t!=null && t.kind != EOF );
    }
    }

void numero():
{}
    {
    try 
    {
    <NUMERO> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != NUMERO && t!=null && t.kind != EOF );
    }
    }

void decimal():
{}
    {
    try 
    {
    <DECIMAL> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != DECIMAL && t!=null && t.kind != EOF );
    }
    }

void cadena():
{}
    {
    try 
    {
    <CADENA> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != CADENA && t!=null && t.kind != EOF );
    }
    }

void caracter():
{}
    {
    try 
    {
    <CHAR> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != CHAR && t!=null && t.kind != EOF );
    }
    }

void sino():
{}
    {
    try 
    {
    <ELSE> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != ELSE && t!=null && t.kind != EOF );
    }
    }

void si():
{}
    {
    try 
    {
    <IF> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != IF && t!=null && t.kind != EOF );
    }
    }

    void eof() :
    {}
    {
    try 
    {
    <EOF> 
    } catch (ParseException e) {        
        Token t;
        System.out.println(errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage));
        System.out.println("");
         do {
       t = getNextToken();
         } while ( t!=null );
    }
    }



    void errorLexico() :
    {}
    {
    <ERRORES> {
               error();
            }
   
    }
    
    JAVACODE
    
    public void error(){
    
    errores++;
    
    System.out.println("\nSe ha encontrado un error lexico \"" + token.image+"\" en la linea "+token.beginLine
    +" columna "+token.beginColumn+"\n");
    }

    JAVACODE

    public void guardarNombreV(){
        nombreV=token.image;        


    }

    JAVACODE

    public void guardarTipoDato(){
        tipoD=token.image;        


    }

    JAVACODE

    public void guardarValorV(){
        valorV=token.image;        


    }

    JAVACODE

    public boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }

     JAVACODE

    public boolean isFloat(String cadena) {

        boolean resultado;

        try {
            Float.parseFloat(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }

    JAVACODE


    public boolean busquedaV(){

        if(nombreVariable.isEmpty())return true;

        else{

        for(String buscar : nombreVariable){

        if(buscar.equals(nombreV))return false;

        }

        }

        return true;

        }



    JAVACODE


    public void errorSemanticoImprimir(){

    int pos = nombreVariable.indexOf(token.image);

    if(pos !=-1){


           if(valorAlmacenado.get(pos).equals("nulo")){

           String errorS = "Error Semantico en la linea " + token.beginLine + " no se ha asignado un valor a la variable";          
            erroresSemanticos.add(errorS);

            }

    }

    else{

    String errorS = "Error Semantico en la linea " + token.beginLine + " no se ha declarado la variable";          
    erroresSemanticos.add(errorS);

    }


    }


    JAVACODE

    public void declarar(){


        //SI NO HAY NADA DENTRO DE LA LISTA
        if(busquedaV()){

            if(valorV.equals("nulo")){
                nombreVariable.add(nombreV);
                nombreV="";
                tipoDato.add(tipoD);
                tipoD="";
                valorAlmacenado.add(valorV);
            }


            else{

            int band = 0;
                switch(tipoD){

                case "entero":
                        if(isNumeric(valorV)){
                                nombreVariable.add(nombreV);
                                nombreV="";
                                tipoDato.add(tipoD);
                                tipoD="";
                                valorAlmacenado.add(valorV);
                                valorV="nulo";
                                band=1;
                              }
                          break;

                case "flotante":
                        if(isFloat(valorV)){
                                nombreVariable.add(nombreV);
                                nombreV="";
                                tipoDato.add(tipoD);
                                tipoD="";
                                valorAlmacenado.add(valorV);
                                valorV="nulo";
                                band=1;
                              }
                          break;

                case "cadena":

                    if(valorV.charAt(0)=='\"'){

                    nombreVariable.add(nombreV);
                    nombreV="";
                    tipoDato.add(tipoD);
                    tipoD="";
                    valorAlmacenado.add(valorV);
                    valorV="nulo";
                    band=1;

                    }
                    break;

                case "caracter":

                    if(valorV.charAt(0)=='\''){

                    nombreVariable.add(nombreV);
                    nombreV="";
                    tipoDato.add(tipoD);
                    tipoD="";
                    valorAlmacenado.add(valorV);
                    valorV="nulo";
                    band=1;

                    }
                    break;

                 case "bool":

                    if(valorV.equals("verdadero")||valorV.equals("falso")){

                    nombreVariable.add(nombreV);
                    nombreV="";
                    tipoDato.add(tipoD);
                    tipoD="";
                    valorAlmacenado.add(valorV);
                    valorV="nulo";
                    band=1;

                    }
                    break;



            }

            if(band==0){

                String errorS = "Error Semantico en la linea " + token.beginLine + " el tipo de dato y el valor no coinciden";          
                erroresSemanticos.add(errorS);
                errorS="";
                nombreV="";
                tipoD="";
                valorV="nulo";

            }


        }

    }


    else{

    String errorS = "Error Semantico en la linea " + token.beginLine + " la variable ya ha sido definida previamente";          
                erroresSemanticos.add(errorS);
                errorS="";

        }
}