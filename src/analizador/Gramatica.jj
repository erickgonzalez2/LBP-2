options{
    
    LOOKAHEAD=1;
   
}



PARSER_BEGIN(Gramatica)



import java.util.*;
import java.io.*;



class Gramatica{

    static ArrayList<String> nombreVariable = new ArrayList<String>(); 
    static ArrayList<String> tipoDato = new ArrayList<String>(); 
    static ArrayList<String> valorAlmacenado = new ArrayList<String>(); 
    
    static ArrayList<String> errores = new ArrayList<String>();     
    
    static ArrayList<String> colaOperacion = new ArrayList<String>();  
    static ArrayList<Integer> posicionTokenOperacion = new ArrayList<Integer>();


    static ArrayList<String> colaComparacion = new ArrayList<String>();
    static ArrayList<Integer> posicionTokenComparacion = new ArrayList<Integer>();

    static String nombreV ="";
    static String tipoD ="";
    static String valorV="nulo";

    static int columnaV = -1;
    static int columnaTd = -1;
    static int columnaVa = -1;

    static int columnaOp = -1;
    
     
    static boolean ident = false;
    static boolean decAritmetica = false;   
    static boolean asignacion_a = false;
    
    // VARIABLES PARA CICLO FOR

    static String variable1;
    static String variable2;
    static String variable3;

    static int colVariable1;
    static int colVariable2;
    static int colVariable3;
    static String cod = "";

    static int esV = 0;



    public static void main(String[] args )  throws FileNotFoundException {
        
    System.out.println("Ingresa el nombre del archivo que quieres analizar");
    Scanner entrada = new Scanner (System.in);
    String str = entrada.next();
    cod = str;
    
    str+= ".txt";
    FileReader file = new FileReader(str);
    BufferedReader buffer = new BufferedReader (file);
    Gramatica analizador = new Gramatica (buffer);
        inicio(str,file,buffer,analizador);
    }
    static void inicio(String str,FileReader file, BufferedReader buffer,Gramatica analizador)throws FileNotFoundException {
    
    
    try{
               
        analizador.Programa();
        

       

    }catch (ParseException e) {
  
        Token t;
             
      
         do {
       t = getNextToken();
       if(t.kind== EOF)break;
 
         } while (t!=null && t.kind != EOF  );
    }
    
    if(errores.isEmpty()){

    System.out.println("Ejecucion finalizada sin errores");   

    //GENERAMOS CÓDIGO INTERMEDIO

    GeneradorIntermedio generadorIntermedio = new GeneradorIntermedio(str,cod);

    generadorIntermedio.generar();

    
    }

    else{
        
        int ntotal = errores.size();
        
       if(ntotal==1)    System.out.println("\nEjecucion finalizada con "+ntotal+" error " );
        else    System.out.println("\nEjecucion finalizada con "+ntotal+" errores " );
        
        if(!errores.isEmpty()){
    
        System.out.println("");
            
            for (String impresion: errores) {
            System.out.println(impresion);            
                }   
            }
        }     
        
    }
    


static void errorData(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        String[] tokenImageVal){
    String eol = System.getProperty("line.separator", "\n");
    Token currentToken = currentTokenVal;
    int [][] expectedTokenSequences = expectedTokenSequencesVal;
    String[] tokenImage = tokenImageVal;
    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      if (maxSize < expectedTokenSequences[i].length) {
        maxSize = expectedTokenSequences[i].length;
      }
      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
        expected.append("...");
      }
      expected.append(eol).append("    ");
    }
    
  
    if(currentToken.next.kind == 0)return;
    
    String retval = "";
    
    
    retval+="Error Sintactico, ";
    retval += "Se ha encontrado \"";
    Token tok = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += " ";
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += " " + tokenImage[tok.kind];
      retval += " \"";
      retval += add_escapes(tok.image);
      retval += " \"";
      tok = tok.next; 
    }
    retval += "\" en la linea " + currentToken.next.beginLine + ", columna " + currentToken.next.beginColumn;
    retval += "." + eol;
    if (expectedTokenSequences.length == 1) {
      retval += "Se esperaba:" + eol + "    ";
    } else {
      retval += "Se esperaba:" + eol + "    ";
    }
    retval += expected.toString();

    errores.add(retval);
    }
 
    static String add_escapes(String str) {
      StringBuffer retval = new StringBuffer();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
   
    }
}








PARSER_END (Gramatica)


SKIP : 
{
    " " | "\n" | "\r" | "\r\n" | "\t" 
}
//OPERADORES ARITMETICOS
TOKEN : 
{
    <IGUAL : "="> // {System.out.println("(OP_Asignacion ---> " +  image + ")");}        //1
    |<MAS : "+">  //{System.out.println("(OP_Mas ---> " +  image + ")");}        //2
    |<MENOS : "-">//{System.out.println("(OP_Menos ---> " +  image + ")");}        //3
    |<MULTIPLICAR : "*">//{System.out.println("(OP_Multiplicar ---> " +  image + ")");}        //4 
    |<DIVIDIR : "/">    //{System.out.println("(OP_Division --->" +  image + ")");}        //5
    |<MODULO : "%">      //{System.out.println("(OP_Modulo ---> " +  image + ")");}     //8
    |<SUMAIGUAL : "+="> //{System.out.println("(OP_SumaAsignacion ---> " +  image + ")");}     //9
    |<RESTAIGUAL : "-=">//{System.out.println("(OP_RestaAsignacion ---> " +  image + ")");}     //10
    |<MULTIGUAL : "*="> //{System.out.println("(OP_MultiplicacionAsignacion ---> " +  image + ")");}     //11
    |<DIVIDIRIGUAL : "/=">//{System.out.println("(OP_DividirAsignacion ---> " +  image + ")");}     //12
    |<MODULOIGUAL : "%="> // {System.out.println("(OP_ModuloAsignacion ---> " +  image + ")");}     //13
}

//PALABRAS RESERVADAS
TOKEN : 
{
     <MAIN : "principal">   // {System.out.println("(PR_MAIN ---> " +  image + ")");}  //15
    | <WRITE : "imprimir">  //  {System.out.println("(PR_IMPRIMIR ---> " +  image + ")");}  //16
    | <READ : "leer">       //  {System.out.println("(PR_LEER ---> " +  image + ")");}  //17
    | <IF : "si">       //  {System.out.println("(PR_IF ---> " +  image + ")");}  //18
    | <ELSE : "sino">       //    {System.out.println("(PR_ELSE ---> " +  image + ")");}//19
    | <BREAK : "romper"> // {System.out.println("(PR_BREAK ---> " +  image + ")");}//22
    | <FOR : "ciclo_for"> //{System.out.println("(PR_FOR ---> " +  image + ")");}//23
    | <WHILE : "ciclo_mientras">//{System.out.println("(PR_WHILE ---> " +  image + ")");}//24
    |<ASIGN : "asignacion">// {System.out.println("(PR_ASIGN ---> " +  image + ")");}//25
    |<ASIGN_A : "asignacion_a">// {System.out.println("(PR_ASIGN ---> " +  image + ")");}//25
    |<DECLARATE : "declarar"> //{System.out.println("(PR_DEC ---> " +  image + ")");}//25
    |<DECLARATE_A : "declarar_a"> //{System.out.println("(PR_DECLA_A ---> " +  image + ")");}//25
    |<ICR: "icr"> //{System.out.println("(PR_ICR ---> " +  image + ")");}//25
    |<DCR : "dcr"> //{System.out.println("(PR_DCR---> " +  image + ")");}//25

}

//CARACTERES ESPECIALES
TOKEN :
{
    <PARI : "(">        //           {System.out.println("(CE_PARENTESISIZQ ---> \"" +  image + "\")");}//25
    | <PARD : ")">        //    {System.out.println("(CE_PARENTESISDER ---> \"" +  image + "\")");}//26
    | <LLAVEI : "{">      //    {System.out.println("(CE_LLAVEIZQ ---> \"" +  image + "\")");}//27
    | <LLAVED : "}">      //     {System.out.println("(CE_LLAVEDER ---> \"" +  image + "\")");}//28
    | <DELIMITER : ";">   //   {System.out.println("(CE_DELIMITADOR ---> \"" +  image + "\")");}//29
    | <COMA : ",">        //   {System.out.println("(CE_COMA ---> \"" +  image + "\")");}//30
    | <COMILLA : "\"">    //   {System.out.println("(CE_COMILLA ---> \"" +  image + "\")");}//31 
}


//OPERADORES LOGICOS
TOKEN : 
{
    <IGUALDAD : "==">     //{System.out.println("(OPL_IGUALDAD ---> " +  image + ")");}//34
    | <MAYOR : ">">       //{System.out.println("(OPL_MAYORQUE ---> " +  image + ")");}//35
    | <MAYORI : ">=">     //{System.out.println("(OPL_MAYORIGUAL ---> " +  image + ")");}//36
    | <MENOR : "<">       //  {System.out.println("(OPL_MENORQUE ---> " +  image + ")");}//37
    | <MENORI : "<=">     //  {System.out.println("(OPL_MENORIGUAL ---> " +  image + ")");}//38
    | <DIFERENCIA : "!="> //{System.out.println("(OPL_DIFERENCIA ---> " +  image + ")");}//39
    | <NEGACION : "!">    //    {System.out.println("(OPL_NEGACION ---> " +  image + ")");}//40
    | <AND : "&&">        //{System.out.println("(OPL_AND ---> " +  image + ")");}//41
    | <OR : "||">         //{System.out.println("(OPL_OR ---> " +  image + ")");}//42
}


    //VALORES PREDETERMINADOS
    TOKEN : 
    {
        <TRUE : "verdadero">    //{System.out.println("(VP_TRUE ---> " +  image + ")");}//43
        |<FALSE : "falso">      //{System.out.println("(VP_FALSE ---> " +  image + ")");}//44
        |<NULL  : "nulo">         //{System.out.println("(VP_NULL ---> " +  image + ")");}//45
    }


//TIPOS DE DATOS
TOKEN :
{
    <INT : "entero">           // {System.out.println("(TD_INT ---> " +  image + ")");}//46
    | <FLOAT : "flotante">     //{System.out.println("(TD_FLOAT ---> " +  image + ")");}//47
    | <STRING : "cadena">      //{System.out.println("(TD_STRING ---> " +  image + ")");}//48
    | <BOOL : "bool">          //{System.out.println("(TD_BOOLEAN ---> " +  image + ")");}//49
    | <CARACTER : "caracter">  //{System.out.println("(TD_CHAR ---> " +  image + ")");}    //50
    | <NUMERO : (["0" - "9"])+>//{System.out.println("(NUMBER ---> " +  image + ")");}//51
    | <IDENTIFICADOR :  ["a" - "z", "A" - "Z"](["a" - "z", "A" - "Z", "0" - "9", "_"])*>   //{System.out.println("(IDENTIFICADOR ---> " +  image + ")");} //52
    | <DECIMAL : (["0" - "9"])+["."](["0" - "9"])+>             //    {System.out.println("(DECIMAL ---> " +  image + ")");}//53
    | <CADENA : "\""(~["\""])*"\"" > //{System.out.println("(STRING ---> " +  image + ")");} //54
    | <CHAR : "\'"(~["\""])"\'" >   // {System.out.println("(CHAR ---> " +  image + ")");} //55
       | <ERRORES : ~[]> //  {System.out.println("(ERROR ---> " +  image + ")");} //58

}

//----------------------------------------FIN DECLARACION TOKENS -------------------------------------------------------
//----------------------------------------INICIO DECLARACION GRAMATICAS -------------------------------------------------------
    
//----------------------------------------PROGRAMA PRINCIPAL -------------------------------------------------------
    void Programa() :{}
    {
        
            <MAIN><PARI><PARD><LLAVEI> Bloque() <LLAVED> <EOF>
        
    }
    
    
//----------------------------------------BLOQUE DE SENTENCIAS -------------------------------------------------------
    void Bloque() : {}
    {
       
        (
            sentencia()
        )*  
        
        
    }
//----------------------------------------SENTENCIAS -------------------------------------------------------
    void sentencia() : {}
    {


        imprimir()
        |errorLexico()
        |declaraciones()
        |asignaciones()   //Asignacion IDENTIFICADOR = (VALOR | IDENFITICADOR) DELIMITER
        |incrementoDecremento()
        | condicionalIf()
        | LOOKAHEAD(2)cicloFor()
        | (<BREAK>delimiter())
        | cicloWhile()
        | leer()
        | declaracionAritmetica()
        |asignacionAritmetica()        

    }

//---------------------------------------- IMPRIMIR -------------------------------------------------------
    void imprimir() :{}

   {
        //PALABRA RESERVADA       

         <WRITE>pari()(

         try{

        <IDENTIFICADOR>{guardarNombreV();}|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>}

        catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO &&
               t.kind != DECIMAL  && t.kind != TRUE &&  t.kind != FALSE && 
               t.kind != CADENA && t.kind != CHAR &&  t!=null && t.kind != EOF );
        }

        )

       pard() delimiter(){errorSemanticoImprimir();}

}

//---------------------------------------- DECLARACIONES -------------------------------------------------------
    void declaraciones() : 
    {}
    {   

        <DECLARATE>
        //TIPO DE DATO
        try{(<INT>|<CARACTER>|<FLOAT>|<STRING>|<BOOL>){guardarTipoDato();}
        }

        catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != INT && t.kind != CARACTER &&
               t.kind != FLOAT && t.kind != STRING &&  t.kind != BOOL && 
               t!=null && t.kind != EOF );
        }

        //IDENTIFICADOR
        identificador(){guardarNombreV();}

        //SIMBOLO =
        ((igual()

        //VALOR
        try{

        (<IDENTIFICADOR>{ident = true;}|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>){guardarValorV();}}

        catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO &&
               t.kind != DECIMAL  && t.kind != TRUE &&  t.kind != FALSE && 
               t.kind != CADENA && t.kind != CHAR &&  t!=null && t.kind != EOF );
        }

        delimiter(){declarar();})|   delimiter(){declarar();}) 
    }


//---------------------------------------- DECLARACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
    void declaracionAritmetica() : {}
    {

        //PALABRA RESERVADA DECLARACION

        <DECLARATE_A>
        //TIPO DE DATO

        try{(<INT>|<CARACTER>|<FLOAT>|<STRING>|<BOOL>){guardarTipoDato();}
        }

        catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != INT && t.kind != CARACTER &&
               t.kind != FLOAT && t.kind != STRING &&  t.kind != BOOL && 
               t!=null && t.kind != EOF );
        }

        //IDENTIFICADOR
        identificador(){guardarNombreV();}

        //SIMBOLO =
        ((igual()operacion(){columnaOp = token.beginColumn;}delimiter(){decAritmetica=true;declarar();}))
    }

//----------------------------------------OPERACIONES ARITMETICAS-------------------------------------------------------
    void operacion() : {}
    {
        try{
       ( <NUMERO> | <IDENTIFICADOR> | <DECIMAL>){guardarColaOperacion();}
       }

       catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != NUMERO && t.kind != IDENTIFICADOR &&
               t.kind != DECIMAL && t!=null && t.kind != EOF );
        }



    (

    try{(<MAS>|<MENOS>|<MULTIPLICAR>|<DIVIDIR>|<MODULO>){guardarColaOperacion();}

    }

    catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != MAS && t.kind != MENOS &&
               t.kind != MULTIPLICAR && t.kind != DIVIDIR && t.kind != MODULO && t!=null && t.kind != EOF );
        }


    try{(<NUMERO>|<IDENTIFICADOR>|<DECIMAL>){guardarColaOperacion();}
    }

    catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != NUMERO && t.kind != IDENTIFICADOR &&
               t.kind != DECIMAL && t!=null && t.kind != EOF );
        }



    )*


    }


//---------------------------------------- ASIGNACIONES CON OPERACIONES ARITMETICAS -------------------------------------------------------
    void asignacionAritmetica() : {}
    {
        <ASIGN_A>identificador(){guardarNombreV();}
        try{(<IGUAL>|<SUMAIGUAL>|<RESTAIGUAL>|<MULTIGUAL>|<DIVIDIRIGUAL>|<MODULOIGUAL>)}

         catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IGUAL && t.kind != SUMAIGUAL &&
               t.kind != RESTAIGUAL && t.kind != MULTIGUAL && t.kind != DIVIDIRIGUAL &&
               t.kind != MODULOIGUAL && t!=null && t.kind != EOF );
        }

        operacion(){columnaOp = token.beginColumn;}delimiter(){asignacion_a = true; asignar();}
    }


//----------------------------------------GRAMATICAS INCREMENTO O DECREMENTO -------------------------------------------------------
    void incrementoDecremento() : {}
    {
        (<ICR>|<DCR>)
        //OPERANDO
        (identificador())

        //OPERADOR
        try{(<MAS><MAS>|<MENOS><MENOS>)}

        catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != MAS && t.kind != MENOS &&
              t!=null && t.kind != EOF );
        }

        //DELIMITADOR
        delimiter()

    }

//----------------------------------------ASIGNACIONES NORMALES -------------------------------------------------------
    void asignaciones() : {}
    {
        //PALABRA RESERVADA       

         <ASIGN> identificador(){guardarNombreV();} igual()


        try{(<IDENTIFICADOR>{ident = true;}|<NUMERO>|<DECIMAL>|<TRUE>|<FALSE>|<NULL>|<CADENA>|<CHAR>){guardarValorV();}}

        catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO && t.kind != DECIMAL &&
              t.kind != TRUE && t.kind != FALSE && t.kind != CADENA &&
            t.kind != CADENA && t.kind != CHAR && t != null && t.kind != EOF );
        }


        delimiter(){asignar();}



}   

//----------------------------------------COMPARACION LOGICA -------------------------------------------------------
    void comparacionLogica() : {}
    {



        //PRIMER TERMINO DEL IF
        try{((<NEGACION>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))|<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>){guardarColaComparacion();}}

        catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO && t.kind != DECIMAL &&
              t.kind != NEGACION && t.kind != CADENA && t.kind != CHAR && t != null && t.kind != EOF );
        }


        //OPERADOR
        (try{(<IGUALDAD> | <MAYOR> | <MAYORI> | <MENOR> | <MENORI>
        | <DIFERENCIA> | <AND> | <OR>
        ){guardarColaComparacion();}}

        catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IGUALDAD && t.kind != MAYORI && t.kind != MENOR &&
              t.kind != MENORI && t.kind != DIFERENCIA && t.kind != AND && 
              t.kind != OR && t != null && t.kind != EOF );
        }


        //SEGUNDO TERMINO
        try{((<NEGACION>(<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>))|<IDENTIFICADOR>|<NUMERO>|<DECIMAL>|<CADENA>|<CHAR>){guardarColaComparacion();}}
         catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != IDENTIFICADOR && t.kind != NUMERO && t.kind != DECIMAL &&
              t.kind != NEGACION && t.kind != CADENA && t.kind != CHAR && t != null && t.kind != EOF );
        }
        )*


}       
        



//----------------------------------------ESTRUCTURA CONDICIONAL IF -------------------------------------------------------
    void condicionalIf() :    {}
    {


        <IF>pari()comparacionLogica()pard()llavei(){evaluarComparacion();}(sentencia())*llaved()

        //ELSEIF
        (LOOKAHEAD(2)(sino()si()pari()comparacionLogica()pard()llavei(){evaluarComparacion();}(sentencia())*llaved()))*
        (LOOKAHEAD(2)(sino()llavei(){evaluarComparacion();}(sentencia())*llaved()))*



}
//---------------------------------------- ESTRUCTURA CICLO FOR -------------------------------------------------------
    void cicloFor() : {}
    {


            <FOR>pari()identificador(){variable1=token.image;colVariable1=token.beginColumn;}igual()numero()delimiter()identificador(){{variable2=token.image;colVariable2=token.beginColumn;}}

            //OPERADOR LOGICO
            try{(<MENOR>|<MAYOR>|<MENORI>|<MAYORI>|<IGUALDAD>|<DIFERENCIA>)}

            catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != MENOR && t.kind != MAYOR && t.kind != MENORI &&
              t.kind != MAYORI && t.kind != IGUALDAD  && t.kind != DIFERENCIA && t != null && t.kind != EOF );
        }


            try{(<NUMERO>|<IDENTIFICADOR>{guardarNombreV();esV = 1;})}

            catch(ParseException e){
             Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != NUMERO && t.kind != IDENTIFICADOR && t != null && t.kind != EOF );

            }
            delimiter()

            //PASO
            identificador(){variable3=token.image;colVariable3=token.beginColumn;}try{(<MAS><MAS>|<MENOS><MENOS>)}

             catch(ParseException e){
             Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } 
        while (t.kind != MAS && t.kind != MENOS && t != null && t.kind != EOF );

            }
            pard()llavei(){evaluarCicloFor();}(sentencia())*llaved()

    }


//----------------------------------------ESTRUCTURA CICLO WHILE -------------------------------------------------------
    void cicloWhile() : {}
    {
        <WHILE>pari()comparacionLogica()pard()llavei(){evaluarComparacion();}(sentencia())*llaved()
    }

//----------------------------------------LEER DATOS DESDE TECLADO -------------------------------------------------------
    void leer() : {}
    {
        <READ>pari()identificador(){guardarNombreV();}pard()delimiter(){errorSemanticoLeer();}

}

     void delimiter() :
    {}
    {
    try 
    {
    <DELIMITER> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != DELIMITER && t!=null && t.kind != EOF );
    }
    }

void llavei() :
    {}
    {
    try 
    { 
    <LLAVEI> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != LLAVEI && t!=null && t.kind != EOF );
    }
    }

void llaved() :
    {}
    {
    try 
    { 
    <LLAVED>
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != LLAVED && t!=null && t.kind != EOF );
    }
    }


 void pari() :
    {}
    {
    try 
    { 
    <PARI> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != PARI && t!=null && t.kind != EOF );
    }
    }

void pard() :
    {}
    {
    try 
    {
    <PARD> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != PARD && t!=null && t.kind != EOF );
    }
    }

void identificador():
    {}
    {
    try 
    {
    <IDENTIFICADOR> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != IDENTIFICADOR && t!=null && t.kind != EOF );
    }
    }

void igual():
{}
    {
    try 
    {
    <IGUAL> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != IGUAL && t!=null && t.kind != EOF );
    }
    }

void negacion():
{}
    {
    try 
    {
    <NEGACION> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != NEGACION && t!=null && t.kind != EOF );
    }
    }

void numero():
{}
    {
    try 
    {
    <NUMERO> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != NUMERO && t!=null && t.kind != EOF );
    }
    }

void decimal():
{}
    {
    try 
    {
    <DECIMAL> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != DECIMAL && t!=null && t.kind != EOF );
    }
    }

void cadena():
{}
    {
    try 
    {
    <CADENA> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != CADENA && t!=null && t.kind != EOF );
    }
    }

void caracter():
{}
    {
    try 
    {
    <CHAR> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != CHAR && t!=null && t.kind != EOF );
    }
    }

void sino():
{}
    {
    try 
    {
    <ELSE> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != ELSE && t!=null && t.kind != EOF );
    }
    }

void si():
{}
    {
    try 
    {
    <IF> 
    } catch (ParseException e) {        
        Token t;
        errorData(e.currentToken,e.expectedTokenSequences,e.tokenImage);
        System.out.println("");
         do {
       t = getNextToken();
         } while (t.kind != IF && t!=null && t.kind != EOF );
    }
    }

    void eof() :
    {}
    {
    try 
    {
    <EOF> 
    } catch (ParseException e) {        
        Token t;
       
         do {
       t = getNextToken();
         } while ( t!=null );
    }
    }



    void errorLexico() :
    {}
    {
    <ERRORES> {
               error();
            }
   
    }


//--------------------------------------------------------------------------------------------------------------------------------
    
   

   


    JAVACODE
    
    public void error(){
    
    
    
    String errorL ="\nError Lexico \"" + token.image+"\" en la linea "+token.beginLine
    +" columna "+token.beginColumn+"\n";
    errores.add(errorL);
    errorL="";
    }

    JAVACODE

    public void guardarNombreV(){
        nombreV=token.image;        
        
        columnaV = token.beginColumn;

    }

    JAVACODE

    public void guardarTipoDato(){
        tipoD=token.image;        
        columnaTd = token.beginColumn;

    }

    JAVACODE

    public void guardarValorV(){
        valorV=token.image;        
        columnaVa = token.beginColumn;

    }

    JAVACODE

    public boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }

     JAVACODE

    public boolean isFloat(String cadena) {

        boolean resultado;

        try {
            Float.parseFloat(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }

    JAVACODE


    public boolean busquedaV(String str){

        if(nombreVariable.isEmpty())return false;

        else{

        for(String buscar : nombreVariable){

        if(buscar.equals(str))return true;

        }

        }

        return false;

        }



    JAVACODE


    public void errorSemanticoImprimir(){


    int pos = nombreVariable.indexOf(nombreV);

    if(pos !=-1){


           if(valorAlmacenado.get(pos).equals("nulo")){

           String errorS = "Error Semantico en la linea " +token.beginLine + ", columna "+ columnaV+ " no se ha asignado un valor a la variable";              
           errores.add(errorS);

            }

    }

    else{

    String errorS = "Error Semantico en la linea " +token.beginLine + ", columna "+ columnaV+ " no se ha declarado la variable";              
    errores.add(errorS);

    }


    }
    
    JAVACODE


    public void errorSemanticoLeer(){

        if(!busquedaV(nombreV)){

            String errorS = "Error Semantico en la linea " + token.beginLine + ", columna "+ columnaV +", la variable que se intenta leer no se ha declarado";          
            errores.add(errorS);
            nombreV="";

            }
          else{

          int pos = nombreVariable.indexOf(nombreV);
          String td = tipoDato.get(pos);
          String t = "";
          nombreV = "";

          switch(td){
                      
            case "entero":
                    valorAlmacenado.set(pos,"0");
                    return;
                    
            case "flotante":
                    valorAlmacenado.set(pos,"0");
                    return;
            
            case "cadena":
                    t+= "\"";
                    t+= "-";
                    t+= "\"";
                    valorAlmacenado.set(pos,t);
                    return;
            
            case "caracter":
                    t+= "\'";
                    t+= "-";
                    t+= "\'";
                    valorAlmacenado.set(pos,t);
                    return;
                    
            case "bool":                    
                    valorAlmacenado.set(pos,"verdadero");
                    return;
            }               
        }
    }

    JAVACODE 

    public void guardarColaOperacion(){

    colaOperacion.add(token.image);
    
    posicionTokenOperacion.add(Integer.valueOf(token.beginColumn));

    }

    JAVACODE 

    public void guardarColaComparacion(){

    colaComparacion.add(token.image);
    posicionTokenComparacion.add(Integer.valueOf(token.beginColumn));
    }


    JAVACODE

    public boolean realizarOperacion(){
        
        int acc = 1;
        String s1;
        Integer columnaOperacion;
    
        //SI ES UN ENTERO
        if(tipoD.equals("entero")){
        int valor = 0;
        
        
        
        for(int iterador = 0;iterador<colaOperacion.size();iterador++){

                s1 = colaOperacion.get(iterador);
                columnaOperacion = posicionTokenOperacion.get(iterador);

                //SI ES UN OPERADOR
                if(s1.equals("+"))acc=1;
                else if(s1.equals("-"))acc=2;
                else if(s1.equals("*"))acc=3;
                else if(s1.equals("/"))acc=4;
                
                //SI ES UN OPERANDO
                else if(isNumeric(s1)){

                    if(acc==1)valor+= Integer.parseInt(s1);
                    if(acc==2)valor-= Integer.parseInt(s1);
                    if(acc==3)valor*= Integer.parseInt(s1);
                    if(acc==4)valor/= Integer.parseInt(s1);
                    
                }

                else if(isFloat(s1)){

                        String errorS = "Error Semantico en la linea " + token.beginLine +", columna"+ columnaOperacion +" los operandos son de tipos distintos";          
                        errores.add(errorS);
                        colaOperacion.clear();
                        posicionTokenOperacion.clear();
                        return false;
      
                        }
                
                else{
                    // BUSCA SI ES UNA VARIABLE
                    if(busquedaV(s1)){
                            
                        int indice = nombreVariable.indexOf(s1);
                        
                        int x;
                        
                        try{
                           String s2 = valorAlmacenado.get(indice);
                           
                           if(s2.equals("nulo")){
                            String errorS = "Error Semantico en la linea " + token.beginLine + ", columna "+columnaOperacion+" la variable no se ha inicializado";          
                            errores.add(errorS);
                            colaOperacion.clear();
                            posicionTokenOperacion.clear();
                            return false;
                            
                            }
                           
                           x = Integer.parseInt(s2); 
                           
                           if(acc==1)valor+= x;
                           if(acc==2)valor-= x;
                           if(acc==3)valor*= x;
                           if(acc==4)valor/= x;

                           
                        }
                        catch(NumberFormatException ex){
                                
                            String errorS = "Error Semantico en la linea " + token.beginLine +", columna " +columnaOperacion+" tipos incompatibles";          
                            errores.add(errorS);
                            colaOperacion.clear();
                            posicionTokenOperacion.clear();
                            return false;

                        }
                            

                        }
                        //NO SE ENCONTRO LA VARIABLE
                      else{

                            String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+columnaOperacion+ " la variable no se ha declarado";          
                            errores.add(errorS);
                            colaOperacion.clear();
                            posicionTokenOperacion.clear();
                            return false;

                    }

                }
                

                
            }

            colaOperacion.clear();
            posicionTokenOperacion.clear();
            valorV = Integer.toString(valor);
            return true;
        
        }
        //SI ES UN FLOTANTE
        else if(tipoD.equals("flotante")){
        float valor = 0;

            for(int iterador = 0;iterador<colaOperacion.size();iterador++){

                s1 = colaOperacion.get(iterador);
                columnaOperacion = posicionTokenOperacion.get(iterador);
            
                if(s1.equals("+"))acc=1;
                else if(s1.equals("-"))acc=2;
                else if(s1.equals("*"))acc=3;
                else if(s1.equals("/"))acc=4;
                
                //ES UN OPERANDO
                else if(isFloat(s1)){

                    if(acc==1)valor+= Float.parseFloat(s1);
                    if(acc==2)valor-= Float.parseFloat(s1);
                    if(acc==3)valor*= Float.parseFloat(s1);;
                    if(acc==4)valor/= Float.parseFloat(s1);
                    
                }
                
                else{
                    // BUSCA SI ES UNA VARIABLE
                    if(busquedaV(s1)){
                            
                        int indice = nombreVariable.indexOf(s1);
                        
                        float x;
                        
                        try{
                           String s2 = valorAlmacenado.get(indice);
                           
                           if(s2.equals("nulo")){
                            String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+columnaOperacion+" la variable no se ha inicializado";          
                            errores.add(errorS);
                            colaOperacion.clear();
                            posicionTokenOperacion.clear();
                            return false;
                            
                            }
                           
                           x = Float.parseFloat(s2); 
                           
                           if(acc==1)valor+= x;
                           if(acc==2)valor-= x;
                           if(acc==3)valor*= x;
                           if(acc==4)valor/= x;

                           
                        }
                        catch(NumberFormatException ex){
                                
                            String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+columnaOperacion+ " tipos incompatibles";          
                            errores.add(errorS);
                            colaOperacion.clear();
                            posicionTokenOperacion.clear();
                            return false;

                        }
                            

                        }
                        //NO SE ENCONTRO LA VARIABLE
                      else{

                            String errorS = "Error Semantico en la linea " + token.beginLine +", columna"+ columnaOperacion +" la variable no se ha declarado";          
                            errores.add(errorS);
                            colaOperacion.clear();
                            posicionTokenOperacion.clear();
                            return false;

                    }

                }


            }
            colaOperacion.clear();
            valorV = Float.toString(valor);
            return true;
         }
        
        
            
        else {
        
        String errorS = "Error Semantico en la linea " + token.beginLine + ", columna "+ columnaOp +" conversion de tipos innacessible";          
        errores.add(errorS);
        colaOperacion.clear();
        posicionTokenOperacion.clear();
        
        return false;

        }


    } 


    JAVACODE

    public void declarar(){

        //SI SE HACE UNA DECLARACION ARITMETICA
        if(decAritmetica){
            decAritmetica = false;
            if(!realizarOperacion()){            
            nombreV="";
            tipoD="";
            valorV="nulo";
            return;
            }
        }
        
        //SI LO ASIGNADO A LA VARIABLE ES UN IDENTIFICADOR
        if(ident){
            ident = false;
                
                //BUSCAMOS SI LA VARIABLE YA FUE DEFINIDA

                if(busquedaV(valorV)){
                    //SI LA ENCONTRO Y PROCEDEMOS A VERIFICAR QUE SEAN DEL MISMO TIPO
                        
                       int indiceV  = nombreVariable.indexOf(valorV);
                       

                       if(tipoDato.get(indiceV).equals(tipoD)){
                            //VERIFICA QUE LA VARIABLE ESTE INICIALIZADA
                                
                                
                                if(!valorAlmacenado.get(indiceV).equals("nulo")){
                                
                                //METEMOS EL VALOR A LA VARIABLE CORRESPONDIENTE
                                
                                    valorV = valorAlmacenado.get(indiceV);
                                }
                                
                                else{
                                
                                //NO SE HA INICIALIZADO LA VARIABLE
                                
                                    String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+columnaVa + " la variable no se ha inicializado";          
                                    errores.add(errorS);
                                    errorS="";
                                    nombreV="";
                                    tipoD="";
                                    valorV="nulo";
                                    return; 
                                                                    
                                }

                        
                        }
                        
                        //NO SON DEL MISMO TIPO
                        else{
                          String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+columnaVa+ " la variables no son del mismo tipo";          
                          errores.add(errorS);
                          errorS="";
                          nombreV="";
                          tipoD="";
                          valorV="nulo";
                          return; 
                          }
                        
                
                    }

                //EN CASO DE QUE LA VARIABLE NO SE HA DEFINIDO
                else{
                    
                String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+columnaVa +" la variable que se busca asignar no ha sido definida";          
                errores.add(errorS);
                errorS="";
                nombreV="";
                tipoD="";
                valorV="nulo";
                return;
                }
                
            }


        //SI NO HAY NADA DENTRO DE LA LISTA
        if(!busquedaV(nombreV)){

            if(valorV.equals("nulo")){
                nombreVariable.add(nombreV);
                nombreV="";
                tipoDato.add(tipoD);
                tipoD="";
                valorAlmacenado.add(valorV);
            }


            else{

            int band = 0;
                switch(tipoD){

                case "entero":
                        if(isNumeric(valorV)){
                                nombreVariable.add(nombreV);
                                nombreV="";
                                tipoDato.add(tipoD);
                                tipoD="";
                                valorAlmacenado.add(valorV);
                                valorV="nulo";                
                                band=1;
                              }
                          break;

                case "flotante":
                        if(isFloat(valorV)){
                                nombreVariable.add(nombreV);
                                nombreV="";
                                tipoDato.add(tipoD);
                                tipoD="";
                                valorAlmacenado.add(valorV);
                                valorV="nulo";                                
                                band=1;
                              }
                          break;

                case "cadena":

                    if(valorV.charAt(0)=='\"'){

                    nombreVariable.add(nombreV);
                    nombreV="";
                    tipoDato.add(tipoD);
                    tipoD="";
                    valorAlmacenado.add(valorV);
                    valorV="nulo";                    
                    band=1;

                    }
                    break;

                case "caracter":

                    if(valorV.charAt(0)=='\''){

                    nombreVariable.add(nombreV);
                    nombreV="";
                    tipoDato.add(tipoD);
                    tipoD="";
                    valorAlmacenado.add(valorV);
                    valorV="nulo";                   
                    band=1;

                    }
                    break;

                 case "bool":

                    if(valorV.equals("verdadero")||valorV.equals("falso")){

                    nombreVariable.add(nombreV);
                    nombreV="";
                    tipoDato.add(tipoD);
                    tipoD="";
                    valorAlmacenado.add(valorV);
                    valorV="nulo";
                    band=1;

                    }
                    break;



            }

            if(band==0){

                String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+ columnaVa+" el tipo de dato y el valor no coinciden";          
                errores.add(errorS);
                errorS="";
                nombreV="";
                tipoD="";
                valorV="nulo";

            }


        }

    }


    else{

    String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+ columnaV +" la variable ya ha sido definida previamente";          
                errores.add(errorS);
                errorS="";

        }
}


    JAVACODE

    public void asignar(){


                          
        //VERIFICAMOS QUE LA VARIABLE YA FUE DEFINIDA

        if(busquedaV(nombreV)){

        //OBTENEMOS SU ÍNDICE Y SU TIPO DE DATO
      
        int indice = nombreVariable.indexOf(nombreV);
        tipoD = tipoDato.get(indice);

        if(asignacion_a){

        asignacion_a=false;
        
        if(!realizarOperacion()){

            
            nombreV="";
            tipoD="";
            valorV="nulo";
            return; 
        }       
        }

        //SI LO QUE SE VA A ASIGNAR ES OTRA VARIABLE
        
            if(ident){
            ident = false;
                
                //BUSCAMOS SI LA VARIABLE YA FUE DEFINIDA

                if(busquedaV(valorV)){
                    //SI LA ENCONTRO Y PROCEDEMOS A VERIFICAR QUE SEAN DEL MISMO TIPO
                        
                       int indiceV  = nombreVariable.indexOf(valorV);
                       

                       if(tipoDato.get(indiceV).equals(tipoD)){
                            //VERIFICA QUE LA VARIABLE ESTE INICIALIZADA
                                
                                
                                if(!valorAlmacenado.get(indiceV).equals("nulo")){
                                
                                //METEMOS EL VALOR A LA VARIABLE CORRESPONDIENTE
                                
                                    valorV = valorAlmacenado.get(indiceV);
                                }
                                
                                else{
                                
                                //NO SE HA INICIALIZADO LA VARIABLE
                                
                                    String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+ columnaVa+ " la variable no se ha inicializado";          
                                    errores.add(errorS);
                                    errorS="";
                                    nombreV="";
                                    tipoD="";
                                    valorV="nulo";
                                    return; 
                                                                    
                                }

                        
                        }
                        
                        //NO SON DEL MISMO TIPO
                        else{
                          String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+ columnaVa+" la variables no son del mismo tipo";          
                          errores.add(errorS);
                          errorS="";
                          nombreV="";
                          tipoD="";
                          valorV="nulo";
                          return; 
                          }
                        
                
                    }

                //EN CASO DE QUE LA VARIABLE NO SE HA DEFINIDO
                else{
                    
                String errorS = "Error Semantico en la linea " + token.beginLine +", columna " +columnaVa +" la variable que se busca asignar no ha sido definida";          
                errores.add(errorS);
                errorS="";
                nombreV="";
                tipoD="";
                valorV="nulo";
                return;
                }
                
            }

            

            

        }

        else{

            String errorS = "Error Semantico en la linea " + token.beginLine + ", columna "+ columnaV+ " la variable no ha sido definida";          
            errores.add(errorS);
            errorS="";
            return;
        }

                int band = 0;
                int posicion = nombreVariable.indexOf(nombreV);
                switch(tipoD){

                case "entero":
                        if(isNumeric(valorV)){
                                
                                nombreV="";                               
                                tipoD="";
                                valorAlmacenado.set(posicion,valorV);
                                valorV="nulo";
                                band=1;
                              }
                          break;

                case "flotante":
                        if(isFloat(valorV)){
                                nombreV="";                               
                                tipoD="";
                                valorAlmacenado.set(posicion,valorV);
                                valorV="nulo";
                                band=1;
                              }
                          break;

                case "cadena":

                    if(valorV.charAt(0)=='\"'){

                    nombreV="";                               
                    tipoD="";
                    valorAlmacenado.set(posicion,valorV);
                    valorV="nulo";
                    band=1;

                    }
                    break;

                case "caracter":

                    if(valorV.charAt(0)=='\''){

                    nombreV="";                               
                    tipoD="";
                    valorAlmacenado.set(posicion,valorV);
                    valorV="nulo";
                    band=1;

                    }
                    break;

                 case "bool":

                    if(valorV.equals("verdadero")||valorV.equals("falso")){

                    nombreV="";                               
                    tipoD="";
                    valorAlmacenado.set(posicion,valorV);
                    valorV="nulo";
                    band=1;
                    
                    }
                    break;



            }

            if(band==0){

                String errorS = "Error Semantico en la linea " + token.beginLine +", columna "+columnaVa + " el tipo de dato y el valor no coinciden";          
                errores.add(errorS);
                errorS="";
                nombreV="";
                tipoD="";
                valorV="nulo";

            }
     
    }

JAVACODE

public void evaluarComparacion(){

    String v1 = "";
    String v2 = "";
    String td1 = "";
    String td2 = "";
    int f1 = 0;
    int f2 = 0;
    int nf = 1;


//1	IGUALDAD : "=="     
//2   	MAYOR : ">"   
//3	MAYORI : ">=" 
//4	MENOR : "<"   
//5	MENORI : "<=" 
//6	DIFERENCIA : "!=" 
//7	NEGACION : "!"    
//8	AND : "&&"        
//9	OR : "||"        
    
    String s1;
    Integer columnaComparacion;
    for(int i=0;i<colaComparacion.size();i++){
                
        s1 = colaComparacion.get(i);
        
        columnaComparacion = posicionTokenComparacion.get(i); 
        char s2 = s1.charAt(0);
          
        if(s1.equals("!")||s1.equals("||")||s1.equals("&&")){
        
        if(f1==0)f1 = 1;                
        
        else if(f2==0)f2=1;
        
        }
        
        else if(s1.equals("verdadero")||s1.equals("falso")){

            if(nf==1){
            v1 = s1;
            td1 = "bool";
            nf = 2;
            }

            else{
            v2 = s1;
            td2 = "bool";
            nf = 3;
            }

            } 

        else if(isNumeric(s1)||isFloat(s1)){
        
            if(nf==1){
            v1 = s1;
            td1 = "entero";
            nf = 2;
            }

            else{
            v2 = s1;
            td2 = "entero";
            nf = 3;
            }       
        }
        
        else if(s2=='\"'){
            
            if(nf==1){
            v1 = s1;
            td1 = "cadena";
            nf = 2;
            }

            else{
            v2 = s1;
            td2 = "cadena";
            nf = 3;
            }        
        }

        else if(s2=='\''){
            
            if(nf==1){
            v1 = s1;
            td1 = "caracter";
            nf = 2;
            }

            else{
            v2 = s1;
            td2 = "caracter";
            nf = 3;
            }        
        }

        else if(!s1.equals("==") && !s1.equals("!=") && !s1.equals(">") && !s1.equals(">=") && 
                !s1.equals("<") && !s1.equals("<=")){                
                //ENTONCES ES UNA VARIABLE
                
                   if(busquedaV(s1)){
                            
                            int indice = nombreVariable.indexOf(s1);
                                if(nf==1){
                                            v1 = s1;                                            
                                            td1 = tipoDato.get(indice);
                                            nf = 2;
                                            }

                                            else{
                                            v2 = s1;
                                            td2 = tipoDato.get(indice);
                                            nf = 3;
                                            }
                                    
                               if( valorAlmacenado.get(indice).equals( "nulo" ) ){
                                    //La variable no ha sido inicialiizada
                                            
                                     String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + columnaComparacion +
                                                     " la variable no se ha inicializado";
                                     errores.add(errorS);
                                     colaComparacion.clear();
                                     posicionTokenComparacion.clear();
                                     return;
                                    }
                                           
                        }
                            //NO ENCONTRO LA VARIABLE
                    else{
                            
                         String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + columnaComparacion +
                                                     " la variable no ha sido definida";
                         errores.add(errorS);
                         colaComparacion.clear();
                        posicionTokenComparacion.clear();
                         return;
                    }
            }

           
            if(nf==3){
                    
                    if(f1 != 1 && f2 != 1){
                    
                        if(!td1.equals("entero") && !td2.equals("flotante") || 
                           !td1.equals("flotante") && !td1.equals("entero")||
                           !td1.equals(td2)){

                              //TIPOS DE DATOS DISTINTOS
                              
                              String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + columnaComparacion +
                                                     " tipos de datos distintos";
                              errores.add(errorS);
                              colaComparacion.clear();
                              posicionTokenComparacion.clear();
                              return;
                        }

                    }

                 v1 = "";
                 v2 = "";
                 td1 = "";
                 td2 = "";
                 f1 = 0;
                 f2 = 0;
                 nf = 1;
                                        
            }

        
    }
    colaComparacion.clear();
    posicionTokenComparacion.clear();
}

JAVACODE


//Evaluacion del ciclo for

    public void evaluarCicloFor(){


                //verificamos que la variable exista
                if(busquedaV(variable1)){
                    
                    //VERIFICAMOS QUE SU TIPO DE DATO SEA ENTERO

                    int pos = nombreVariable.indexOf(variable1);
                    
                    if(tipoDato.get(pos).equals("entero")){
                            //Verificamos que la variable 2 sea la misma
                                
                                    if(variable1.equals(variable2)){
                                        
                                        //verificamos si lo utilizado como limite del ciclo es una variable

                                        if(esV == 1){
                                                    esV=0;
                                                    //buscamos que la variable exista
                                                    if(busquedaV(nombreV)){
                                                        
                                                                //verificamos que su tipo de dato sea entero
                                                                pos = nombreVariable.indexOf(nombreV);
                                                                
                                                                if(tipoDato.get(pos).equals("entero")){
                                                                //AHORA VERIFICAMOS QUE ESTE INICIALIZADA
                                                                
                                                                        if(valorAlmacenado.get(pos).equals("nulo")){
                                                                            
                                                                                //NO ESTA INICIALIZADA
                                                                                String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + columnaV +
                                                                                " variable no inicializada";
                                                                                errores.add(errorS);    
                                                                                return;
                                                                                
                                                                        }
                                                                        
                                                                        //EN CASO DE QUE ESTE INICIALIZADA CONTINUAMOS
                                                                
                                                                }
                                                                    
                                                                else{
                                                                //NO ES ENTERO
                                                                String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + columnaV +
                                                                " el tipo de dato no es adecuado para el ciclo, se requiere entero";
                                                                errores.add(errorS);    
                                                                return;
                                                                }
                                                        
                                                    }

                                                    else{   //NO EXISTE LA VARIABLE
                                                        
                                                            String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + columnaV +
                                                            " la variable no ha sido definida";
                                                            errores.add(errorS);    
                                                            return;
                                                    
                                                    }

                                        }
                                        //AQUI CONTINUAMOS AL FINALIZAR TODAS LAS CONDICIONES Y AHORA VERIFICAMOS QUE LA TERCERA VARIABLE SEA LA MISMA
                                        
                                                if(!variable2.equals(variable3)){
                                                    //EN CASO DE QUE SEAN DIFERENTES
                                                    String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + colVariable3 +
                                                    " variable diferente utilizada";
                                                    errores.add(errorS);    
                                                    return;
                                                
                                                }

                                                else{
                                                //TODAS LAS CONDICIONES CUMPLIDAS AL LLREGAR AQUI
                                                   return;
                                                }

                                    }
                                 
                                    else{ // NO ES LA MISMA
                                          String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + colVariable2 +
                                          " variable diferente utilizada";
                                          errores.add(errorS);    
                                          return;
                                    }

                           }
                           
                     else{  //NO ES ENTERO
                        
                        String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + colVariable1 +
                        " el tipo de dato no es adecuado para el ciclo, se requiere entero";
                        errores.add(errorS);    
                        return;

                     }


                }


                else{  //NO EXISTE LA VARIABLE                   
                    String errorS = "Error Semantico en la linea " + token.beginLine + ", columna " + colVariable1 +
                    " la variable no ha sido definida";
                    errores.add(errorS);    
                    return;
                }
                

}